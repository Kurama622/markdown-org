"function! s:popup_filter(winid, key) abort
  "if a:key == "\<c-k>"
    "call win_execute(a:winid, "normal! \<c-y>")
    "return v:true
  "elseif a:key == "\<c-j>"
    "call win_execute(a:winid, "normal! \<c-e>")
    "return v:true
  "elseif a:key == 'q' || a:key == 'x'
    "return popup_filter_menu(a:winid, 'x')
  "endif
  "return v:false
"endfunction

"function! translator#window#popup#create(linelist, configs) abort
  "let options = {
        "\ 'pos': a:configs.anchor,
        "\ 'col': 'cursor',
        "\ 'line': a:configs.anchor[0:2] == 'top' ? 'cursor+1' : 'cursor-1',
        "\ 'moved': 'any',
        "\ 'padding': [0, 0, 0, 0],
        "\ 'maxwidth': a:configs.width - 2,
        "\ 'minwidth': a:configs.width - 2,
        "\ 'maxheight': a:configs.height,
        "\ 'minheight': a:configs.height,
        "\ 'filter': function('s:popup_filter'),
        "\ 'borderchars' : a:configs.borderchars,
        "\ 'border': [1, 1, 1, 1],
        "\ 'borderhighlight': ['translatorborder'],
        "\ }
  "let winid = popup_create('', options)
  "call translator#window#init(winid)
  "let bufnr = winbufnr(winid)
  "call appendbufline(bufnr, 0, a:linelist)
  "call translator#buffer#init(bufnr)
"endfunction

"call translator#window#popup#create()

"let border = 1
"function! centered_floating_window(border)
    "let width = min([&columns - 4, max([80, &columns - 20])])
    "let height = min([&lines - 4, max([20, &lines - 10])])
    "let top = ((&lines - height) / 2) - 1
    "let left = (&columns - width) / 2
    "let opts = {'relative': 'editor', 'row': top, 'col': left, 'width': width, 'height': height, 'style': 'minimal'}

    "if a:border == v:true
        "let top = "╭" . repeat("─", width - 2) . "╮"
        "let mid = "│" . repeat(" ", width - 2) . "│"
        "let bot = "╰" . repeat("─", width - 2) . "╯"
        "let lines = [top] + repeat([mid], height - 2) + [bot]
        "let s:buf = nvim_create_buf(v:false, v:true)
        "call nvim_buf_set_lines(s:buf, 0, -1, v:true, lines)
        "call nvim_open_win(s:buf, v:true, opts)
        "set winhl=Normal:Normal
        "let opts.row += 1
        "let opts.height -= 2
        "let opts.col += 2
        "let opts.width -= 4
        "call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
        "au BufWipeout <buffer> exe 'bw '.s:buf
    "else
        "call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
    "endif
"endfunction
"call centered_floating_window()

"function! CreateCenteredFloatingWindow()
    "let width = min([&columns - 4, max([80, &columns - 20])])
    "let height = min([&lines - 4, max([20, &lines - 10])])
    "let top = ((&lines - height) / 2) - 1
    "let left = (&columns - width) / 2
    "let opts = {'relative': 'editor', 'row': top, 'col': left, 'width': width, 'height': height, 'style': 'minimal'}

    "let top = "╭" . repeat("─", width - 2) . "╮"
    "let mid = "│" . repeat(" ", width - 2) . "│"
    "let bot = "╰" . repeat("─", width - 2) . "╯"
    "let lines = [top] + repeat([mid], height - 2) + [bot]
    "let s:buf = nvim_create_buf(v:false, v:true)
    "call nvim_buf_set_lines(s:buf, 0, -1, v:true, lines)
    "call nvim_open_win(s:buf, v:true, opts)
    "set winhl=Normal:Floating
    "let opts.row += 1
    "let opts.height -= 2
    "let opts.col += 2
    "let opts.width -= 4
    "call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
    "au BufWipeout <buffer> exe 'bw '.s:buf
"endfunction
"call CreateCenteredFloatingWindow()



function! OpenFloatingWin()
    let width = min([&columns - 20, max([30, &columns - 120])])
    let height = min([&lines - 4, max([20, &lines - 10])])
    let top = ((&lines - height) / 2) - 1
    let left = (&columns - width) / 2
    let opts = {
          \ 'relative': 'editor',
          \ 'row': top,
          \ 'col': left,
          \ 'width': width,
          \ 'height': height
          \ }

  " 设置浮动窗口打开的位置，大小等。
  " 这里的大小配置可能不是那么的 flexible 有继续改进的空间

  let top = "╭" . repeat("─", width - 2) . "╮"
  let mid = "│" . repeat(" ", width - 2) . "│"
  let bot = "╰" . repeat("─", width - 2) . "╯"
  let lines = [top] + repeat([mid], height - 2) + [bot]


  let buf = nvim_create_buf(v:false, v:true)
  call nvim_buf_set_lines(buf, 0, -1, v:true, lines)
  "call nvim_buf_set_option(buf, '&selectmode', v:true)
  let win = nvim_open_win(buf, v:true, opts)

  " 设置浮动窗口高亮
  "call setwinvar(win, '&winhl', 'Normal:Pmenu')
  "call setwinvar(win, '&winhl', 'Normal:MyHighlight')
  call setwinvar(win, '&winhl', 'NormalFloat:TabLine')
  
  "call nvim_win_set_option(win, 'name', 'pop')


  setlocal
        \ buftype=nofile
        \ nobuflisted
        \ bufhidden=hide
        \ nonumber
        \ norelativenumber
        \ signcolumn=no
endfunction
call OpenFloatingWin()

"nmenu 


"fnew
"call nvim_win_float_set_pos(0,5,10,20,5)
"hi Floating guibg=#000044
"set winhl=Normal:Floating
"set nonumber
"
"let g:buf = nvim_create_buf(0, 1)

"let winopts = {
    "\ 'width': 1,
    "\ 'height': 1,
    "\ 'relative': 'editor',
    "\ 'anchor': 'NE',
    "\ 'focusable': 0,
    "\ 'row': 1,
    "\ 'col': 1 }

"tabnew

"call nvim_open_win(g:buf, 0, winopts)

"close
"

"let buf = nvim_create_buf(v:false, v:true)
"call nvim_buf_set_lines(buf, 0, -1, v:true, ["test", "text"])
"let opts = {'relative': 'cursor', 'width': 10, 'height': 2, 'col': 0,
    "\ 'row': 1, 'anchor': 'NW', 'style': 'minimal'}
"let win = nvim_open_win(buf, 0, opts)
"" optional: change highlight, otherwise Pmenu is used
"call nvim_win_set_option(win, 'winhl', 'Normal:MyHighlight')

